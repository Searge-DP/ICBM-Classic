buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}

plugins {
  id 'com.matthewprenger.cursegradle' version '1.0.1'
  id 'net.saliman.cobertura' version '2.2.5'
  id 'com.github.kt3k.coveralls' version '2.0.1'
}

apply from: 'https://raw.githubusercontent.com/BuiltBrokenModding/BuiltBrokenScripts/buildScripts/index.gradle'
apply plugin: 'forge'
apply plugin: 'curseforge'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'


ext.buildProps = file "build.properties"

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

if (project.getProperty("bambooshortPlanName") == "BBM-Dev") {
    group = "dev.builtbroken.icbm.classicmisslepack"
    archivesBaseName = "ICBM-ClassicMissilePack"
} else {
    group = "dev.builtbroken.icbm.classicmisslepack"
    archivesBaseName = "ICBM-ClassicMissilePack"
}

version = "${project.minecraft.version}-${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}b"

// This is used to set the local version
if (project.hasProperty("bambooBuildNumber"))
    version += project.bambooBuildNumber
else
    version += "NIGHTLY"
println "version = "+ version

println "Current Minecraft version = " + minecraft.apiVersion

def currentJvm = org.gradle.internal.jvm.Jvm.current()
println "Current Java version = " + currentJvm


archivesBaseName = "BasicIndustry"

minecraft {
	replace "@MAJOR@", config.version.mod.major
	replace "@MINOR@", config.version.mod.minor
	replace "@REVIS@", config.version.mod.revis
	
	if (project.hasProperty("bambooBuildNumber")) {
		replace "@BUILD@", project.bambooBuildNumber
	}
	else {
		replace "@BUILD@", getDate()
	}
}


processResources {
	from 'build.properties'
}

task copyBuildXml(type: Copy) {
    from 'build.properties'
    into 'output'
}

task apiZip(type: Zip) {
    classifier = 'api'
    from sourceSets*.allSource
    include 'artillects/api/**'
    destinationDir = file 'output'
}

artifacts {
    archives apiZip
}

repositories {
    maven {
        name "BuiltBroken"
        url "http://ci.builtbroken.com/maven/"
    }
    maven {
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven { 
        name 'OC Maven'
        url = "http://maven.cil.li/" }
}

dependencies 
{
    testCompile 'junit:junit:4.11'
    compile "mcp.mobius.waila:Waila:1.5.8a_1.7.10"
    compile "li.cil.oc:OpenComputers:MC1.7.10-1.4.0.+:dev"
    compile "dev.builtbroken.icbm:ICBM:1.7.10-0.+:deobf-dev"
    compile "dev.builtbroken.voltzengine:VoltzEngine:1.7.10-0.+:deobf-dev"
    testRuntime 'org.slf4j:slf4j-simple:1.7.10'
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}
